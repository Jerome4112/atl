from fastapi import APIRouter
from ATL.schemas.Kunde import Kunde, UserCreate
from ATL.schemas.posts import Post, PostCreate
from sqlalchemy.orm import Session
from fastapi import Depends, HTTPException
from ATL.dependencies import get_db
from ATL.services.kunde import (
    get_user_by_email,
    create_user as create_user_service,
    get_kunde,
    get_user,
)
from ATL.services.posts import create_user_post

router = APIRouter(prefix="/kunde")


@router.post("/", response_model=Kunde)
def create_user(user: UserCreate, db: Session = Depends(get_db)):
    db_user = get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    return create_user_service(db=db, user=user)


@router.get("/", response_model=list[Kunde])
def read_kunde(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    kunde = get_kunde(db, skip=skip, limit=limit)
    return kunde


@router.get("/{kunde_id}", response_model=Kunde)
def read_user(kunde_id: int, db: Session = Depends(get_db)):
    db_user = get_user(db, kunde_id=kunde_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user


@router.post("/{kunde_id}/posts/", response_model=Post)
def create_post_for_user(user_id: int, post: PostCreate, db: Session = Depends(get_db)):
    return create_user_post(db=db, post=post, user_id=user_id)